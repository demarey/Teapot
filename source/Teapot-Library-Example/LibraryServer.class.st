"
I'm the web server that provides a REST API for creating, deleting and finding books. My responses are in JSON format (generated by NeoJSON). I use Teapot internally. In case of an unsuccessful request I use HTTP code to indicate the error along with a JSON object that contains a code and a message key. See the examples below for more information.

Usage:
	server := LibraryServer serveOn: 8000.
	client := LibraryClient port: 8000.
	
	client addBook:  {#title -> 'book 1'. #authors -> 'author 1'} asDictionary.
	client books inspect.
	
	server stop.

Example HTTP requests:

Create book
	Request:
		POST http://localhost:8000/books
		Content-Type: application/x-www-form-urlencoded
		title=book1&authors=author1
	Response:
		201 {""title"":""book1"",""id"":1,""authors"":""author1""}
	
Malformed create
	Request:
		POST http://localhost:8000/books
		Content-Type: application/x-www-form-urlencoded
		title=book1
	Response:
		400 {""message"":""Missing parameter: authors"",""code"":""MALFORMED_INPUT""}
		
Modify book
	Request:
		PUT http://localhost:8000/books
		Content-Type: application/x-www-form-urlencoded	
		title=book1&authors=author2
	Response:
		200 {""title"":""book1"",""id"":1,""authors"":""author2""}
		
Malformed modify
	Request:
		PUT http://localhost:8000/books
		Content-Type: application/x-www-form-urlencoded	
		title=book1
	Response:
		400 {""message"":""Missing parameter: authors"",""code"":""MALFORMED_INPUT""}			
					
Delete book
	Request:
		DELETE http://localhost:8000/books/1
	Response:
		200 {""title"":""book1"",""id"":1,""authors"":""author2""}
		
Deleting non existent
	Request:
		http://localhost:8000/books/3	
	Response:
		404 {""message"":""No such book: 3"",""code"":""NOT_FOUND""}
		
Find book
	Request:
		GET http://localhost:8000/books/1
	Response:
		200 {""title"":""book1"",""id"":3,""authors"":""author2""}	
			
Find non existent
	Request:
		GET http://localhost:8000/books/1
	Response:	
		404 {""message"":""No such book: 1"",""code"":""NOT_FOUND""}
			
List all
	Request:
		GET http://localhost:8000/books
	Response:
		200 [{""title"":""book1"",""id"":3,""authors"":""author2""}]
"
Class {
	#name : 'LibraryServer',
	#superclass : 'Object',
	#instVars : [
		'port',
		'teapot',
		'bookShelf'
	],
	#category : 'Teapot-Library-Example',
	#package : 'Teapot-Library-Example'
}

{ #category : 'instance creation' }
LibraryServer class >> serveOn: portNumber [
	^ self new  
		initializePort: portNumber;
		start
]

{ #category : 'error handlers' }
LibraryServer >> bookNotFound: aBookNotFound request: aZnRequest [
	^ TeaResponse notFound body:
		{ 
			#code -> 'NOT_FOUND'. 
			#message -> ('No such book: ', aBookNotFound bookId asString)
		} asDictionary
]

{ #category : 'routes' }
LibraryServer >> createBook: request [
	| book |
	book := bookShelf addBook: (self makeBook: request).
	^ TeaResponse created
		body: book;
		location: '/books/', (book at: #id) asString
]

{ #category : 'routes' }
LibraryServer >> deleteBook: request [		
	^ bookShelf removeBook: (request at: #id)
	

]

{ #category : 'initialization' }
LibraryServer >> initializePort: anInteger [
	bookShelf := BookShelf new.
	teapot := Teapot configure: { 
		#port -> anInteger. 
		#debugMode -> true. 
		#defaultOutput -> #json 
	}.
	^ self 
		registerRoutes;
		registerErrorHandlers;
		yourself
]

{ #category : 'private' }
LibraryServer >> makeBook: request [
	^ {#title   -> (request at: #title).
      #authors -> (request at: #authors)} asDictionary.
]

{ #category : 'error handlers' }
LibraryServer >> missingParam: aTeaNoSuchParam request: aZnRequest [
	^ TeaResponse badRequest body:
		{ 
			#code -> 'MALFORMED_INPUT'. 
			#message -> ('Missing parameter: ', aTeaNoSuchParam param)
		} asDictionary
]

{ #category : 'routes' }
LibraryServer >> readBook: request [
	^ bookShelf findBook: (request at: #id)
]

{ #category : 'routes' }
LibraryServer >> readBooks: aTeaRequest [
	^ bookShelf books
]

{ #category : 'initialization' }
LibraryServer >> registerErrorHandlers [
	teapot
		exception: TeaNoSuchParam -> (Send message: #missingParam:request: to: self);
		exception: BookNotFound -> (Send message: #bookNotFound:request: to: self);
		exception: Error -> (TeaResponse serverError body: { #code -> 'ERROR' } asDictionary )		
]

{ #category : 'initialization' }
LibraryServer >> registerRoutes [
	teapot
		GET: '/' -> '<h1>A simple book library server</h1>'; output: #html;
		GET: '/books' -> (Send message: #readBooks: to: self);
		GET: '/books/<id:IsInteger>' -> (Send message: #readBook: to: self);
		POST: '/books' -> (Send message: #createBook: to: self);		
		PUT: '/books/<id:IsInteger>' -> (Send message: #updateBook: to: self);
		DELETE: '/books/<id:IsInteger>' -> (Send message: #deleteBook: to: self)
]

{ #category : 'controlling' }
LibraryServer >> start [
	teapot start.
	^ self
]

{ #category : 'controlling' }
LibraryServer >> stop [
	teapot stop
]

{ #category : 'routes' }
LibraryServer >> updateBook: request [
	^ bookShelf 
		replaceBook: (request at: 'id') 
		with: (self makeBook: request)

	

	
]
